
//____________________________________ ОСНОВЫ РАБОТЫ С ФАЙЛОВОЙ СИСТЕМОЙ - IO _________________________________________

//  При использовании IO  основным инструментом по работе с файловой системой является класс File.
//  Расположен в пакете java.io.File
// Конструктор принимает в качестве параметра абсолютный или относительный адрес объекта в виде строковой переменной.
//
//  File f1 = new File("a.txt")
//                              f1 - объект ассоциированный с файлом
//                              "a.txt" - адрес файла
//
// !!!  Внимание. Если файл по указанному адресу существует. то объект будет связан с файлом на диске.
//                Если же по указанному адресу файл не существовал, то объект будет связан с виртуальным файлом в ОЗУ.
//_____________________________________________________________________________________________________________________
//______________________________________ МЕТОДЫ КЛАССА File ___________________________________________________________
//
//  String getName()                        Вернёт имя файла
//  String getParent()                      Вернёт имя каталога файла
//  String getAbsolutePath()                Вернёт путь к файлу
//  boolean exist()                         Вернёт true если файл существует
//  boolean renameTo(File новое имя)        Переименовывает файл
//  boolean delete()                        Удаляет файл
//  boolean isDirectory()                   Проверяет является ли объект каталогом
//  boolean mkdir()                         Создаёт каталог
//  boolean createNewFile()                 Создать новый файл
//  boolean mkdirs()                        Создаёт каталог путь для которого ещё не создан
//  String[] list()                         Только для каталогов. Список остальных объектов внутри него в
//                                          виде массива строк.
//  File[] listFiles                        Возвращает массив файлов и подкаталогов, которые находятся в
//                                          определённом каталоге.
//  long length()                           Возвращает размер файла в байтах.
//_____________________________________________________________________________________________________________________


//package Exp;


import java.io.*;
import java.util.Scanner;

//public class Java_File {
//    public static void main(String[] args) {
//
//____________________________________ Получить адрес какого либо объекта файловой системы ____________________________
//        (".") - рабочий каталог приложения.
//
//        File workFolder = new File(".");
//        File [] files = workFolder.listFiles();     //  Возвращает массив файлов и подкаталогов, которые находятся в
////                                                      определённом каталоге.
//        for (int i = 0; i < files.length; i++) {    // Цикл для вывода всех элементов массива.
//            System.out.println(files[i]);
//        }
//
//____________________________________________ СОЗДАНИЕ ФАЙЛА__________________________________________________________
//
//        File file1 = new File("a.txt");              // Создание адреса для файла.
//        try {
//            file1.createNewFile();                   // Создание файла по указанному адресу.
//        } catch (IOException e) {
//            e.printStackTrace();                     // Вывод на экран сообщения об ошибке.
//        }
//
//_____________________________________________ СОЗДАНИЕ ПАПКИ ________________________________________________________
//
//        File folder1 = new File("AAA");
//        folder1.mkdirs();
//
//____________________ СМЕСТИТЬ ТОЧКУ ОТСЧЁТА ОТНОСИТЕЛЬНОЙ АДРЕСАЦИИ (Создание файла внутри папки) ___________________
//
//        File file2 = new File(folder1, "b.doc");     // Создание файла внутри папки ААА (folder1)
//                                                     // folder1 - относительно чего создаётся объект.
//        try {
//            file2.createNewFile();
//        } catch (IOException e) {
//            e.printStackTrace();                      // Вывод на экран сообщения об ошибке.
//        }
//
//__________________________________________ УДАЛЕНИЕ ОБЪЕКТА (файла) _________________________________________________
//
//        File file1 = new File("a.txt");
//        file1.delete();
//
//_________________________________________ УДАЛЕНИЕ ПАПКИ С СОДЕРЖИМЫМ _______________________________________________
//
//        1. Удаляем содержимое папки (каталога).
//        2. А теперь можно удалить и саму папку (каталог).
//
//        File file2 = new File("AAA/b.txt");
//        file2.delete();
//
//
//        File folder1 = new File("AAA");
//        folder1.delete();
//
//_________________________________________ ПРОЦЕДУРА ДЛЯ ЗАПИСИ ИНФОРМАЦИИ В ФАЙЛ ____________________________________
//
//  1.  Создать объект File
//  2.  Создать объект PrintWriter
//  3.  Указать File или просто имя файла как назначение PrintWriter
//  4.  Вывод информации по аналогии с консолью.
//  5.  !!! Запись должна проводиться только в пределах блока try..catch
//
//
//__________________________________________ КЛАСС PrintWriter ________________________________________________________
//
//      Удобным классом для записи данных в файл является класс PrintWriter.
//
//  Конструктор класса:
//        PrintWriter(OutputStream выходной_поток)
//        PrintWriter(OutputStream выходной_поток, boolean сброс_при_новой_строке)
//        PrintWriter(Writer выходной_поток)
//        PrintWriter(Writer выходной_поток, boolean
//
//  Выходной_поток - Определяет объект класса OutputStream, который примет вывод.
//
//        PrintWriter(File выходной файл)
//        PrintWriter(File выходной файл, String набор символов)
//        PrintWriter(String имя_файла)
//        PrintWriter(String имя_файла, String набор символов)
//
//  !!! Удобство заключается в возможности использования методов print() и println().
//
//__________________________________________ БЛОК try -- с - ресурсами ________________________________________________
//
//  Для закрытия потока можно либо вызвать явно метод close(), либл использовать введённый в JDK7 оператор
//  try с ресурсами.
//
//          Объявление блока try с ресурсами
//   try (описание ресурса) {
//   Использование ресурса
//   }
//
//    1. Ресурсы управляемые оператором try должны быть объектами классов, реализующих интерфейс AutoCloseable
//    2. Ресурс, объявленный в блоке try, является неявно финальным
//    3. Можно управлять несколькими ресурсами, отделив каждый из них в объявлении точкой с запятой.
//
//____ПРИМЕР:____

//        try (PrintWriter a = new PrintWriter("c.txt")) {          // Создание PrintWriter для записи в файл c.txt
//            for (int i = 0; i < 10; i++) {
//                a.println(i);                                     // Запись данных в файл
//            }
//            a.println();                                          // Запись данных в файл
//            a.println("Hello WORLD");
//        } catch (FileNotFoundException e) {
//            System.out.println("ERROR FILE WRITE");
//        }
//
//____________________________
//
//        File file = new File("hello.txt");
//        try(PrintWriter pw = new PrintWriter(file)) {
//            pw.println("Hello world");
//        }catch (IOException e) {
//            e.printStackTrace();              // Вывод на экран сообщения об ошибке.
//        }
//
//--------------ЗАДАЧА-------------------------------------------------------------------------------------------------
// Обработка данных для аналитики в виде строк и записи в файл.
//
//        String[] goods = new String[]{"Mars", "Kit-kat", "Snikers", "Twix", "Baunty"};
//        int[] price = new int[]{25, 20, 25, 20, 24};          // Цена за шоколадки
//        int[] n = new int[]{120, 200, 250, 150, 80};          // Кол-во проданных штук
//
//        File file = new File("report.csv");
//        String del = ";";                                       // Разделитель строк
//
//        saveToCSVFile(file, del, goods, price, n);
//        System.out.println("Done!");
//    }
//
//    public static void saveToCSVFile(File file, String del, String[] g, int[] p, int[] n) {       // Метод для сохранения в CSV файл
//        try (PrintWriter pw = new PrintWriter(file)) {
//            for (int i = 0; i < g.length; i++) {
//                pw.println(g[i] + del + p[i] + del + n[i]);         // Запись в строку по индуксу из разных массивов.
//            }
//        } catch (IOException e) {
//            e.printStackTrace();              // Вывод на экран сообщения об ошибке.
//        }
//    }

//----------СЧИТАТВАНИЕ ДАННЫХ ИЗ ФАЙЛА И ВЕРНУТЬ В ВИДЕ СТРОКИ---------------------------------------------------------

//        File file = new File("report.csv");
//        String result = getStringFromFile(file);
//        System.out.println(result);
//    }
//
//    public static String getStringFromFile(File file){
//            String result = "";                                 // Строка в которую будет запись
//            try (Scanner sc = new Scanner(file)) {
//// Scanner читает данные от символа перевода строки до символа перевода строки.
//
//                for (; sc.hasNextLine();){
//                    result += sc.nextLine() + System.lineSeparator();
//                }
//            } catch (IOException e) {
//                // TODO: handle exception
//                e.printStackTrace();              // Вывод на экран сообщения об ошибке.
//            }
//            return result;
//    }

//------------ПРОЦЕДУРА ДЛЯ СЧИТЫВАНИЯ ИНФОРМАЦИИ ИЗ ФАЙЛА С ПОМОЩЬЮ BufferedReader (если только текст)-----------------

//  1.  Создать объект File.
//  2.  Создать объект BufferedReader.
//  3.  Создать объект FileReader в качестве источника данных указать file.
//  4.  Считать данные.
//  5.  Закрыть файл (ИЛИ использовать try с ресурсами).
//_____________________________________________________________________________________________________________________
//
//        File file = new File("report.csv");
//        String result = loadStringFromFile(file);
//        System.out.println(result);
//    }
//
//    public static String loadStringFromFile(File file) {
//        String result = "";                                // Строка куда будет сохраняться результат
//        try(BufferedReader br = new BufferedReader(new FileReader(file))) {
//
//            String temp = "";                              // Временная строка (буфер)
//
//            for(;;) {
//                temp = br.readLine();
//                if(temp == null) {
//                    break;
//                }
//                result += temp + System.lineSeparator();
//            }
//
//        }catch (IOException e) {
//            // TODO: handle exception
//            e.printStackTrace();                           // Вывод на экран сообщения об ошибке.
//        }
//        return result;
//
//
//    }
//}
