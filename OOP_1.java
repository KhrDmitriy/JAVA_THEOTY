
//_________________________________ ОБЪЕКТНО-ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ _________________________________________
//
//      Объектно-ориентированное программирование (ООП) - методология программирования, основанная на представлении
//  программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы
//  образуют иерархию наследования.
//
//      Объектно-ориентированное программирование разрабатывалось с целью связать поведение сущности с её данными и
//  описать объекты реального мира и бизнес-процессы с помощью программного кода. Таким образом использование этой
//  методологии позволяет описать предметную область задачи в более привычной форме, используя при этом модель того
//  или иного объекта и его поведения.
//
//  Класс - это способ описать модель (нужные функции/характеристики модели) используя язык программирования.
//
//  Объект – переменная, созданная на основе этого класса.
//_____________________________________________________________________________________________________________________
//________________________________________________ ООП ________________________________________________________________
//
//  1.  Абстракция – возможность описания модельного, приближенного объекта предметной области с использованием языка
//                   программирования. (Берутся (вычленяются) важные характеристики и отбрасываются несущественные).
//  2.  Наследование – когда появляется возможность создать один класс на основании другого.
//  3.  Инкапсуляция – это возможность описания данных и функций для работы с ними в едином программном компоненте
//  4.  Полиморфизм
//
//  Пример описания объекта предметной области.
//  Объект: Автомобиль.
//      Свойства:
//  + Цвет                  // String
//  + Масса                 // Integer
//  + Год выпуска
//  + Скорость
//
//      Методы: (Что может делать объект/ что можно делать с объектом).
//  + Сигнал
//  + Ускорение
//  + Торможение
//_____________________________________________________________________________________________________________________


//package Theory_JAVA;
//
//public class OOP_1 {        // public class Car  // Название. (Объявление класса начинается с ключевого слова class).
//
//      (Желательно, чтобы имя класса совпадало с названием той сущности или того объекта окружающего нас мира который
//       описывается с помощью этого класса).

//________________________________________ ОБЪЯВЛЕНИЕ КЛАССА В JAVA ___________________________________________________
//
////  Переменные объявленные в теле класса называются – поля.
//
//    String color;                   // Поля класса      (В теле класса объявляются переменные).
//    double weight;                  // Поля класса      (В теле класса объявляются переменные).
//    int year;                       // Поля класса      (В теле класса объявляются переменные).
//    private double velocity=0;      // Поля класса      (В теле класса объявляются переменные).
//
//    void beep() {                               // Метод класса (подачи сигнала).
//        System.out.println("BEEP-BEEP!!!");
//    }
//
//    void acceleration (double a) {              // Метод класса (ускорения, на вход принимает вещественную переменную).
//        velocity=velocity+a;                    //
//    }
//
//    void deceleration (double b) {              // Метод класса (замедления, на вход принимает вещественную переменную).
//        if(velocity-b>=0) velocity=velocity-b;
//    }
//
//    void print() {                              // Метод класса состояния объекта .
////  Состояние объекта – это совокупность из значений его полей.
//        System.out.println("Color: "+color);
//        System.out.println("Weight: "+weight);
//        System.out.println("Year car: "+year);
//        System.out.println("Velosity: "+velocity);
//    }
////    Каждый метод класса, т.е. любой из методов, описанных в классе, имеет полный доступ к полям своего класса (он
////    может, как читать эти переменные, так и записать в них новое значение).
//}
//_______________________________________________________________________________________________________________________
//  4 способа описания класса:
//      1.	Каждый класс описывается в отдельном файле (универсальный).
//      2.	Можно описывать новый класс в том же файле где был описан другой класс
//          (только у этих классов модификатор классов не должен быть public).
//      3.	Можно описать новый класс в теле другого класса, такие классы называются вложенными или
//          внутренними в зависимости от модификатора.
//      4.  Можно описать новый класс в любой локальной области видимости
//          (в теле метода, в теле условного оператора, хоть в теле цикла).
//_____________________________________________________________________________________________________________________
//_____________________________________________________________________________________________________________________
//  Создадим новый проект. В этом новом проекте создадим сразу два класса в одном и том же пакете. Один класс
//  автомобиль, а второй это класс main. Точку входа должен содержать только класс main.
//
//  1. Создаём папку sample
//  2. В папке создаём два файла Car и Main.
//
//_____________________________________________________________________________________________________________________
//_____________________________________________________________________________________________________________________
//package sample;
//
//public class Car {
//    String color;                   // Поля класса      (В теле класса объявляются переменные).
//    double weight;                  // Поля класса      (В теле класса объявляются переменные).
//    int year;                       // Поля класса      (В теле класса объявляются переменные).
//    private double velocity=0;      // Поля класса      (В теле класса объявляются переменные).
//
//    void beep() {                               // Метод класса (подачи сигнала).
//        System.out.println("BEEP-BEEP!!!");
//    }
//    void acceleration (double a) {              // Метод класса (ускорения, на вход принимает вещественную переменную).
//        velocity=velocity+a;
//    }
//    void deceleration (double b) {              // Метод класса (замедления, на вход принимает вещественную переменную).
//        if(velocity-b>=0) velocity=velocity-b;
//    }
//    void print() {                              // Метод класса состояния объекта .
////  Состояние объекта – это совокупность из значений его полей.
//        System.out.println("Color: "+color);
//        System.out.println("Weight: "+weight);
//        System.out.println("Year car: "+year);
//        System.out.println("Velosity: "+velocity);
//    }
//
//}
//_____________________________________________________________________________________________________________________






















